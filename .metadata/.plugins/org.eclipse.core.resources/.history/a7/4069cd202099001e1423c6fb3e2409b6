import java.util.Arrays;

public class BoardWithPawns {
	private char[][] board;
	private boolean turn;
	
	// Default constructor for a 5x5 board
	public BoardWithPawns(){
		turn = true;
		board = new char[5][5];
		for(int i = 0; i < board.length; i++) {
			for(int j = 0; j < board.length; j++) {
				board[i][j] = '.';
			}
		}
		for(int i = 0; i < board.length; i++) {
			board[board.length-1][i] = 'X';
			board[0][i] = 'O';
		}
	}
	
	// Constructor for a custom-sized board
	public BoardWithPawns(int dimension) {
	    turn = true;
	    board = new char[dimension][dimension];
	    for (int i = 0; i < board.length; i++) {
	        for (int j = 0; j < board.length; j++) {
	            board[i][j] = '.';
	        }
	    }
	    for (int i = 0; i < board.length; i++) {
	        board[dimension - 1][i] = 'X';
	        board[0][i] = 'O';
	    }
	}
	
	//For sized board and turn
	public BoardWithPawns(int dimension, boolean turn){
		this.turn = turn;
		board = new char[dimension][dimension];
		for(int i = 0; i < board.length; i++) {
			for(int j = 0; j < board.length; j++) {
				board[i][j] = '.';
			}
		}
		for(int i = 0; i < board.length; i++) {
			board[dimension-1][i] = 'X';
			board[0][i] = 'O';
		}
	}
	
	// Constructor for a specified board and turn
	public BoardWithPawns(char[][] newBoard, boolean turn){
		this.turn = turn; 
		this.board = newBoard;
	}
	
	// Constructor for a specified board
	public BoardWithPawns(char[][] newBoard){
		this.board = newBoard;
	}
	
	// Represent the board as a string
	public String toString(){
		String output = "";
		if (turn == false)
			output += "Player two's turn ('O') \n\n";
		else
			output += "Player one's turn ('X') \n\n";
		for(int i = 0; i < board.length; i++) {
			output += i + "   ";
			for(int j = 0; j < board.length; j++) {
				output += board[i][j] + " ";
			}
			output += "\n";
		}
		output += "\n    ";
		for(int i = 0; i <board.length; i++) {
			output += i + " ";
		}
		return output;
	}
	
	//Method to move the pawn in a selected column
	public boolean movePawn(int col) {
		int furthestRow = 0;
		System.out.println(col);
		//Player 1
		if (turn) {
			for(int i = board.length-1; i > 0; i--) {
				if(board[i][col] == 'X') {
					furthestRow = i;
				}
			}
			System.out.println(furthestRow);
			if(col > 0) {
				if(board[furthestRow-1][col-1] == 'O') {
					board[furthestRow-1][col-1] = 'X';
					board[furthestRow][col] = '.';
					return true;
				}
			}
			if(col < board.length-1) {
				if(board[furthestRow-1][col+1] == 'O') {
					board[furthestRow-1][col+1] = 'X';
					board[furthestRow][col] = '.';
					return true;
				}
			}
			if(board[furthestRow-1][col] == 'X' || board[furthestRow-1][col] == 'O' || furthestRow == -1) {
				return false;
			}
			board[furthestRow-1][col] = 'X';
			board[furthestRow][col] = '.';
			return true;
		
		//Player 2
		}if(!turn) {
			for(int i = 0; i < board.length; i++) {
				if(board[i][col] == 'O') {
					furthestRow = i;
				}
			}
			if(col > 0) {
				if(board[furthestRow+1][col-1] == 'X') {
					board[furthestRow+1][col-1] = 'O';
					board[furthestRow][col] = '.';
					return true;
				}
			}
			if(col < board.length-1) {
				if(board[furthestRow+1][col+1] == 'X') {
					board[furthestRow+1][col+1] = 'O';
					board[furthestRow][col] = '.';
					return true;
				}
			}
			
			if(board[furthestRow+1][col] == 'X' || board[furthestRow+1][col] == 'O'|| furthestRow == -1) {
				return false;
			}
			board[furthestRow+1][col] = 'O';
			board[furthestRow][col] = '.';
			return true;
			
		}
		return false;	
	}
	//checks if the game is in a stalemate
	public boolean isStalemate() {
		char[][] copyBoard = new char[board.length][board.length];
		boolean hasMove = false;
		for(int i = 0; i < board.length; i++) {
			for(int j = 0; j < board.length; j++) {
				copyBoard[i][j] = board[i][j];
			}
		}
		for(int i = 0; i < board.length; i++) {
			if(movePawn(i)) {
				hasMove = true;
			}
		}
		board = copyBoard;
		return !hasMove;
		
	}
	
	// Reset the board to its initial state
	public void reset() {
		for(int i = 0; i < board.length-1; i++) {
			for(int j = 0; j < board.length; j++) {
				board[i][j] = '.';
			}
		}
		for(int i = 0; i < board.length; i++) {
			board[board.length-1][i] = 'X';
			board[0][i] = 'O';
		}
	}
	
	//makes a random viable move
	public boolean randomPlay() {
			int ran = (int)(Math.random()*board.length);
			while(movePawn(ran) != true) {
				ran = (int)(Math.random()*board.length);
				movePawn(ran);
			}
			return true;
	}
	
	// Randomize the positions of pawns on the board
	public void randomize() {
		for(int i = 0; i < board.length; i++) {
			for(int j = 0; j < board.length; j++) {
				board[i][j] = '.';
			}
		}
		for(int i = 0; i < board.length; i++) {
			for(int j = 0; j < board.length/board.length; j++) {
				int r = (int)((Math.random()*2)+1);
				board[board.length-r][i] = 'X';
				r = (int)((Math.random()*2)+1);
				board[0+r-1][i] = 'O';
			}
		}
	}
	
	//Check if either player won
	public boolean isWon() {
		int xCount = 0;
		int oCount = 0;
		for(int i = 0; i < board.length; i++) {
			for(int j = 0; j < board.length; j++) {
				if(board[i][j] == 'X') {
					xCount++;
				}
				if(board[i][j] == 'O') {
					oCount++;
				}
			}
		}
		if(oCount == 0) {
			return true;
		}
		if(xCount == 0) {
			return true;
		}
		for(int i = 0; i < board.length; i++) {
			if(board[0][i] == 'X') {
				return true;
			}
			if(board[board.length-1][i] == 'O') {
				return true;
			}
		}
		return false;
	}

	public char[][] getBoard() {
		return board;
	}

	public void setBoard(char[][] board) {
		this.board = board;
	}

	public boolean isTurn() {
		return turn;
	}

	public void setTurn(boolean turn) {
		this.turn = turn;
	}
}